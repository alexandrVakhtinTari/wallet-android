import java.nio.file.Files
import java.nio.file.Paths

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply from: "../download-libwallet.gradle"
// PRIVATE BUILD: comment (add two slashes at the start) the following line for private release
// builds support
apply plugin: 'io.sentry.android.gradle'

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.tari.android.wallet"
        minSdkVersion 24
        targetSdkVersion 31
        versionCode buildNumber
        versionName versionNumber + "-libwallet-" + libwalletVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters = []
            abiFilters.addAll(supportedABIs)
        }
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_STL=c++_static'
            }
        }
    }

    buildTypes {
        copySentryProps()
        def properties = loadSecretProps()
        debug {
            jniDebuggable true
            buildConfigField("String", "GIPHY_KEY", "\"${properties.getProperty('giphy.key')}\"")
        }
        release {
            buildConfigField("String", "GIPHY_KEY", "\"${properties.getProperty('giphy.key')}\"")
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ndk {
                debugSymbolLevel 'FULL'
            }
//            PRIVATE BUILD: uncomment (remove two slashes at the start) the following line for
//            private release builds support
//            signingConfig signingConfigs.debug

//            PRIVATE BUILD: comment (add two slashes at the start of each line) all the `sentry`
//            block for private release builds support
            sentry { // https://docs.sentry.io/platforms/android/#gradle-configuration
                autoProguardConfig true
                autoUpload true
                uploadNativeSymbols true
                includeNativeSources true
            }
        }
    }

    flavorDimensions "privacy-mode"

    productFlavors {
        regular {
            dimension "privacy-mode"
            buildConfigField "String", "NOTIFICATIONS_API_KEY",
                    "\"${loadSecretProps().getProperty('service.notifications.api_key')}\""
            proguardFile 'regular-proguard-rules.pro'
        }
        privacy {
            dimension "privacy-mode"
        }
    }

    applicationVariants.all { variant ->
        if (variant.productFlavors.get(0).name == "regular") {
            if (variant.buildType.name == "debug") {
                variant.mergedFlavor.manifestPlaceholders.sentryPublicDSN = ''
            } else {
                variant.mergedFlavor.manifestPlaceholders.sentryPublicDSN =
                        loadSecretProps().getProperty('sentry.public_dsn')
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    buildFeatures {
        viewBinding = true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

}

Properties loadSecretProps() {
    final File secretProps = project.rootProject.file("secret.properties")
    if (!secretProps.exists()) {
        Files.copy(
                Paths.get(project.rootProject.file("secret-example.properties").absolutePath),
                Paths.get(secretProps.absolutePath),
        )
    }
    final Properties properties = new Properties()
    properties.load(secretProps.newDataInputStream())
    return properties
}

void copySentryProps() {
    final File sentryProps = project.rootProject.file("sentry.properties")
    if (!sentryProps.exists()) {
        Files.copy(
                Paths.get(project.rootProject.file("sentry-example.properties").absolutePath),
                Paths.get(sentryProps.absolutePath),
        )
    }
}

preBuild.dependsOn("downloadLibwallet")

repositories {
    maven {
        url "https://giphy.bintray.com/giphy-sdk"
    }
}

dependencies {
    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    // coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.1"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.3.1"
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.fragment:fragment-ktx:1.3.6'

    // kotlin extensions
    implementation 'androidx.core:core-ktx:1.6.0'
    // android
    implementation 'androidx.appcompat:appcompat:1.3.1'
    // support lib
    implementation 'androidx.legacy:legacy-support-v13:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    // android jetpack
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    // recycler view
    implementation "androidx.recyclerview:recyclerview:1.2.1"
    // the new view pager
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    // for tab layout
    implementation 'com.google.android.material:material:1.4.0'
    // flex layout
    implementation 'com.google.android:flexbox:2.0.1'
    // overscroll
    implementation 'me.everything:overscroll-decor-android:1.0.4'
    // lottie
    implementation 'com.airbnb.android:lottie:3.6.1'
    // Glide - image processing & caching library
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    kapt 'com.github.bumptech.glide:compiler:4.12.0'
    // giphy
    implementation 'com.giphy.sdk:ui:2.0.9'
    // spring animation
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    implementation 'com.daasuu:EasingInterpolator:1.3.0'
    // seismic - device shake detector
    implementation 'com.squareup:seismic:1.0.2'

    // biometric
    implementation 'androidx.biometric:biometric:1.1.0'

    // joda
    implementation 'net.danlew:android.joda:2.10.9'

    // parceler
    implementation 'org.parceler:parceler-api:1.1.13'
    kapt 'org.parceler:parceler:1.1.13'

    // dagger - DI
    implementation 'com.google.dagger:dagger:2.38'
    kapt 'com.google.dagger:dagger-compiler:2.38'

    // rx
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.19'

    // logger
    implementation 'com.orhanobut:logger:2.2.0'

    // QR scanner
    implementation 'com.budiyev.android:code-scanner:2.1.0'
    implementation 'com.journeyapps:zxing-android-embedded:4.1.0'

    // encryption
    implementation "de.adorsys.android:securestoragelibrary:1.2.4"

    // Tor control
    implementation 'net.freehaven.tor.control:jtorctl:0.2'

    // used to read log files
    //noinspection GradleDependency
    implementation 'commons-io:commons-io:2.6'

    // JSON reflection-based (+de)serialization library
    implementation 'com.google.code.gson:gson:2.8.6'

    // Retrofit2 - Popular (2020) REST API wrapper with Java interface
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'

    // Google services & Google drive
    regularImplementation 'com.google.android.gms:play-services-auth:19.2.0'
    regularImplementation 'com.google.http-client:google-http-client-gson:1.39.0'
    regularImplementation('com.google.api-client:google-api-client-android:1.31.3') {
        exclude group: 'org.apache.httpcomponents'
    }
    regularImplementation('com.google.apis:google-api-services-drive:v3-rev197-1.25.0') {
        exclude group: 'org.apache.httpcomponents'
    }
    // matomo - tracking
    regularImplementation 'org.matomo.sdk:tracker:4.1.2'
    // sentry - crash analytics
    regularImplementation 'io.sentry:sentry-android:5.0.1'

    // test
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'io.mockk:mockk:1.10.6'
    androidTestImplementation 'io.mockk:mockk-android:1.10.6'
    androidTestImplementation 'androidx.test:core:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}
